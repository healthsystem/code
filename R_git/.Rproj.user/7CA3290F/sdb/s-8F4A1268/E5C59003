{
    "contents" : "rm(list=ls())\nsetwd('/home/robert/workspace/Projects/health_fraud/code/R_code')\nlibrary('igraph', lib.loc = '/home/robert/workspace/Projects/health_fraud/lib')\n\ng <-read.graph(\"../../data/edge_col.txt\", format = \"ncol\")\n#neighborhood.size# print(g, g=T, v=T, e=T)\nlinks <-get.data.frame(g, what=\"both\")\nMisLinks <-data.frame(links[2])\ncolnames(MisLinks) <- c(\"s\",\"t\",\"v\")\nnodes = unique(MisLinks[1])\nfor (item in nodes){\n  g2 = graph.neighborhood(g, 2, nodes = item)\n  den = graph.density(g, loops = T)\n  \n  #2. Degree Statistics: mean, variance, median, maximum degree\n  \n  degrees = degree(g)\n  mean_degree = mean(degrees)\n  variance_degree = var(degrees)\n  median_degree = median(degrees)\n  maximum_degree = max(degrees)\n  \n  #3. Edge weight statistics: mean and variance of weights (currently has some problem with weight.)\n  sum_weights = graph.strength(g, mode = 'all')\n  mean_weights = mean(sum_weights)\n  variance_weights = var(sum_weights)\n  median_weights = median(sum_weights)\n  maximum_weights = max(sum_weights)\n  \n  \n  #4. Diameter\n  diameter = diameter(g)\n  \n  \n  #5. Topological change.\n  cutoffs = c(0, 1, 2)\n  top_chgs = cutoffs*0\n  for (i in 1:(length(cutoffs)-1)) {\n    E_cur = length(which(E(g)$weight>cutoffs[i]))\n    E_new = length(which(E(g)$weight>cutoffs[i+1]))\n    \n    top_chgs[i] = (E_cur - E_new)/E_cur\n  }\n  top_chgs[length(top_chgs)] = 1\n  \n  #6. Clustering coefficient. mean, variance and maximum\n  clustering_coff_mean = transitivity(g, type = \"globalundirected\")\n  clustering_coff_local = transitivity(g, type = \"localundirected\")\n  clustering_coff_variance = var(clustering_coff_local)\n  clustering_coff_max = max(clustering_coff_local)\n  \n  #7. Topological coefficient\n  \n  V0 = as.numeric(V(g))\n  for (v0 in V0) {\n    V1 = neighbors(g, v0, 'all')\n    kn = length(V1)\n    \n    J = 0\n    cnt = 0\n    for (v1 in V1) {\n      V2 = neighbors(g, v1, 'all')\n      \n      for (v2 in V2) {\n        if (v2 != v0) {\n          J = J + length(which(neighbors(g, v2, 'all') %in% c(neighbors(g, v0, 'all'), v0)))\n          cnt = cnt + 1\n        }\n      }\n    }\n    V(g)[v0]$topological_coef = J/cnt/kn\n  }\n  \n  topological_coef_mean = mean(V(g)$topological_coef)\n  topological_coef_variance = var(V(g)$topological_coef)\n  topological_coef_median = median(V(g)$topological_coef)\n  topological_coef_max = max(V(g)$topological_coef)    \n  \n}\n# \n# # g2 = graph.neighborhood(g, 2, nodes = \"A50373\")\n# \n# # print(g2, g2=T, v=T, e=T)\n# # plot(g2)\n# #1. Graph density\n# # g = g2\n# den = graph.density(g, loops = T)\n# \n# #2. Degree Statistics: mean, variance, median, maximum degree\n# \n# degrees = degree(g)\n# mean_degree = mean(degrees)\n# variance_degree = var(degrees)\n# median_degree = median(degrees)\n# maximum_degree = max(degrees)\n# \n# #3. Edge weight statistics: mean and variance of weights (currently has some problem with weight.)\n# sum_weights = graph.strength(g, mode = 'all')\n# mean_weights = mean(sum_weights)\n# variance_weights = var(sum_weights)\n# median_weights = median(sum_weights)\n# maximum_weights = max(sum_weights)\n# \n# \n# #4. Diameter\n# diameter = diameter(g)\n# \n# \n# #5. Topological change.\n# cutoffs = c(0, 1, 2)\n# top_chgs = cutoffs*0\n# for (i in 1:(length(cutoffs)-1)) {\n#     E_cur = length(which(E(g)$weight>cutoffs[i]))\n#     E_new = length(which(E(g)$weight>cutoffs[i+1]))\n# \n#     top_chgs[i] = (E_cur - E_new)/E_cur\n# }\n# top_chgs[length(top_chgs)] = 1\n# \n# #6. Clustering coefficient. mean, variance and maximum\n# clustering_coff_mean = transitivity(g, type = \"globalundirected\")\n# clustering_coff_local = transitivity(g, type = \"localundirected\")\n# clustering_coff_variance = var(clustering_coff_local)\n# clustering_coff_max = max(clustering_coff_local)\n# \n# #7. Topological coefficient\n# \n# V0 = as.numeric(V(g))\n# for (v0 in V0) {\n#     V1 = neighbors(g, v0, 'all')\n#     kn = length(V1)\n# \n#     J = 0\n#     cnt = 0\n#     for (v1 in V1) {\n#         V2 = neighbors(g, v1, 'all')\n# \n#         for (v2 in V2) {\n#             if (v2 != v0) {\n#                 J = J + length(which(neighbors(g, v2, 'all') %in% c(neighbors(g, v0, 'all'), v0)))\n#                 cnt = cnt + 1\n#             }\n#         }\n#     }\n#     V(g)[v0]$topological_coef = J/cnt/kn\n# }\n# \n# topological_coef_mean = mean(V(g)$topological_coef)\n# topological_coef_variance = var(V(g)$topological_coef)\n# topological_coef_median = median(V(g)$topological_coef)\n# topological_coef_max = max(V(g)$topological_coef)                                                       \n\n",
    "created" : 1378924022173.000,
    "dirty" : true,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "2654561318",
    "id" : "E5C59003",
    "lastKnownWriteTime" : 1378932462,
    "path" : "~/workspace/Projects/health_fraud/code/R_code/graph_features.r",
    "properties" : {
    },
    "source_on_save" : false,
    "type" : "r_source"
}