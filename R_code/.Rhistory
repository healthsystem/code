rm(list=ls())
#library('tnet', lib.loc = '/home/lshi/.R/')
library('tnet')
# Load network
#net <- cbind(
#i=c(1,1,2,2,2,2,3,3,4,5,5,6),
#j=c(2,3,1,3,4,5,1,2,2,2,6,5),
#w=c(4,2,4,4,1,2,2,4,1,2,1,1))
net <-read.table('./4_edges_tnet_fraud_weighted')
nodes <-read.table('./4_nodes_tnet_fraud_weighted')
names <- as.character(nodes[order(nodes$V1),2])
print ("---complete reading the network, start calculating degree centrality-------------")
# Calculate degree centrality (note that alpha is included in the list of measures)
# degree <- degree_w(net, measure=c("degree", "output", "alpha"), alpha=0.5)
tmp <- data.frame(
names,
degree_w(net, measure=c("degree", "output", "alpha"), alpha=0.5), stringsAsFactors=FALSE)
View(tmp)
dimnames(tmp )[[2]] <- c("name", "node", "degree", "alpha1.0", "alpha0.5")
tmp <- tmp[, c('names','degree','alpha0.5', 'alpha1.0')]
tmp <- tmp[, c('names','degree','alpha0.5', 'alpha1.0')]
tmp <- tmp[, c('name','degree','alpha0.5', 'alpha1.0')]
View(tmp)
temp[,'alpha1.0']
test <-tmp[,'alpha1.0']
fix(test)
output<- data.frame(tmp[order(-tmp[,"degree"]),c("name", "degree")],
tmp[order(-tmp[,"alpha0.5"]),c("name","alpha0.5")],
tmp[order(-tmp[,"alpha1.0"]),c("name","alpha1.0")])
View(output)
# Load tnet
rm(list=ls())
#library('tnet', lib.loc = '/home/lshi/.R/')
library('tnet')
# Load network
#net <- cbind(
#i=c(1,1,2,2,2,2,3,3,4,5,5,6),
#j=c(2,3,1,3,4,5,1,2,2,2,6,5),
#w=c(4,2,4,4,1,2,2,4,1,2,1,1))
net <-read.table('./4_edges_tnet_fraud_weighted')
nodes <-read.table('./4_nodes_tnet_fraud_weighted')
names <- as.character(nodes[order(nodes$V1),2])
print ("---complete reading the network, start calculating degree centrality-------------")
# Calculate degree centrality (note that alpha is included in the list of measures)
# degree <- degree_w(net, measure=c("degree", "output", "alpha"), alpha=0.5)
tmp <- data.frame(
names,
degree_w(net, measure=c("degree", "output", "alpha"), alpha=0.5), stringsAsFactors=FALSE)
dimnames(tmp )[[2]] <- c("name", "node", "degree", "degree1.0", "degree0.5")
tmp <- tmp[, c('name','degree','degree0.5', 'degree1.0')]
output<- data.frame(tmp[order(-tmp[,"degree"]),c("name", "degree")],
tmp[order(-tmp[,"degree0.5"]),c("name","degree0.5")],
tmp[order(-tmp[,"degree1.0"]),c("name","degree1.0")])
# Load tnet
rm(list=ls())
#library('tnet', lib.loc = '/home/lshi/.R/')
library('tnet')
# Load network
#net <- cbind(
#i=c(1,1,2,2,2,2,3,3,4,5,5,6),
#j=c(2,3,1,3,4,5,1,2,2,2,6,5),
#w=c(4,2,4,4,1,2,2,4,1,2,1,1))
net <-read.table('./4_edges_tnet_fraud_weighted')
nodes <-read.table('./4_nodes_tnet_fraud_weighted')
names <- as.character(nodes[order(nodes$V1),2])
print ("---complete reading the network, start calculating degree centrality-------------")
# Calculate degree centrality (note that alpha is included in the list of measures)
# degree <- degree_w(net, measure=c("degree", "output", "alpha"), alpha=0.5)
tmp <- data.frame(
names,
degree_w(net, measure=c("degree", "alpha"), alpha=0.5),
closeness_w(net, alpha=0),
closeness_w(net, alpha=0.5),
betweenness_w(net,alpha=0),
betweenness_w(net,alpha=0.5),
stringsAsFactors=FALSE)
dimnames(tmp )[[2]] <- c("name", "node", "degree","degree0.5","closeness","closeness0.5","betweenness","betweenness0.5")
#tmp <- tmp[, c('name',"degree","degree0.5","closeness","closeness0.5","betweenness","betweenness0.5")]
output<- data.frame(tmp[order(-tmp[,"degree"]),c("name", "degree")],
tmp[order(-tmp[,"degree0.5"]),c("name","degree0.5")],
tmp[order(-tmp[,"closeness"]),c("name","closeness")],
tmp[order(-tmp[,"closeness0.5"]),c("name","closeness0.5")],
tmp[order(-tmp[,"betweenness"]),c("name","betweenness")],
tmp[order(-tmp[,"betweenness0.5"]),c("name","betweenness0.5")],
)
View(tmp)
tmp <- data.frame(
names,
degree_w(net, measure=c("degree", "alpha"), alpha=0.5),
closeness_w(net, alpha=0),
closeness_w(net, alpha=0.5),
betweenness_w(net,alpha=0),
betweenness_w(net,alpha=0.5),
stringsAsFactors=FALSE)
View(tmp)
View(tmp)
View(tmp)
dimnames(tmp )[[2]] <- c("name", "node", "degree","degree0.5","node1", "closeness","n.closeness", "node2", "closeness0.5", "n.closeness2",
"node3","betweenness","node4","betweenness0.5")
tmp <- tmp[, c('name',"degree","degree0.5","closeness","closeness0.5","betweenness","betweenness0.5")]
View(tmp)
output<- data.frame(tmp[order(-tmp[,"degree"]),c("name", "degree")],
tmp[order(-tmp[,"degree0.5"]),c("name","degree0.5")],
tmp[order(-tmp[,"closeness"]),c("name","closeness")],
tmp[order(-tmp[,"closeness0.5"]),c("name","closeness0.5")],
tmp[order(-tmp[,"betweenness"]),c("name","betweenness")],
tmp[order(-tmp[,"betweenness0.5"]),c("name","betweenness0.5")],
)
output<- data.frame(tmp[order(-tmp[,"degree"]),c("name", "degree")],
tmp[order(-tmp[,"degree0.5"]),c("name","degree0.5")],
tmp[order(-tmp[,"closeness"]),c("name","closeness")],
tmp[order(-tmp[,"closeness0.5"]),c("name","closeness0.5")],
tmp[order(-tmp[,"betweenness"]),c("name","betweenness")],
tmp[order(-tmp[,"betweenness0.5"]),c("name","betweenness0.5")]
)
View(output)
View(output)
write.table(output, file = './4nodes_fraud_centrality.txt', col.names = TRUE,row.names = FALSE, sep = ',')
setwd("~/workspace/FraudDetection")
source('wGraphAna_4node.r')
source('wGraphAna_4node.r')
setwd("~/workspace/MachineLearning/Learning_R")
install.packages('DMwR')
install.packages('RMySQL')
library(DMwR)
head(algae)
algae
?read.table
algae <- read.table('Analysis.txt',
header=F,
dec='.',
col.names=c('season','size','speed','mxPH','mnO2','Cl',
'NO3','NH4','oPO4','PO4','Chla','a1','a2','a3','a4',
'a5','a6','a7'),
na.strings=c('XXXXXXX'))
algae <- read.table('./Data/Analysis.txt',
header=F,
dec='.',
col.names=c('season','size','speed','mxPH','mnO2','Cl',
'NO3','NH4','oPO4','PO4','Chla','a1','a2','a3','a4',
'a5','a6','a7'),
na.strings=c('XXXXXXX'))
algae[1:5]
algae[1:5,]
summary(algae)
View(algae)
header(algae)
colnames(algae)
test <- algae$season
rm test
fix(test)
cln(test)
clean(test)
rm(test)
test <- algae$a2
rm test
rm(test)
?hist
ummary(algae)
hist(algae$mxPH, prob=T)
hist(algae$mxPH)
hist(algae$mxPH, prob=T)
library(car)
par(mfrow=c(1,2))
hist(algae$mxPH, prob=T, xlab='',
main='Histogram of maximum pH value',ylim=0:1)
lines(density(algae$mxPH,na.rm=T))
rug(jitter(algae$mxPH))
qq.plot(algae$mxPH,main='Normal QQ plot of maximum pH')
par(mfrow=c(1,1))
install.packages(car)
?qq.plot
??qq.plot
par(mfrow=c(1,2))
hist(algae$mxPH, prob=T, xlab='',
main='Histogram of maximum pH value',ylim=0:1)
hist(algae$mxPH, prob=T)
hist(algae$mxPH, prob=T)
hist(algae$mxPH, prob=T, xlab='',
main='Histogram of maximum pH value',ylim=0:1)
lines(density(algae$mxPH,na.rm=T))
?densit
?density
qqplot(algae$mxPH,main='Normal QQ plot of maximum pH')
rug(jitter(algae$mxPH))
qqplot(algae$mxPH,main='Normal QQ plot of maximum pH')
?rug
rug(jitter(algae$mxPH))
lines(density(algae$mxPH,na.rm=T))
hist(algae$mxPH, prob=T)
lines(density(algae$mxPH,na.rm=T))
rug(jitter(algae$mxPH))
qqplot(algae$mxPH,main='Normal QQ plot of maximum pH')
install.packages(car)
RSiteSearch('car')
install.packages('car')
install.packages("car")
setwd("~/workspace/MachineLearning/Learning_R")
R CMD INSTALL cars
R CMD INSTALL './car_2.0-11.tar.gz'
R INSTALL './car_2.0-11.tar.gz'
INSTALL './car_2.0-11.tar.gz'
INSTALL car_2.0-11.tar.gz
install.packages("./car_2.0-11.tar.gz")
library(car)
par(mfrow=c(1,2))
hist(algae$mxPH, prob=T, xlab='',
main='Histogram of maximum pH value',ylim=0:1)
lines(density(algae$mxPH,na.rm=T))
rug(jitter(algae$mxPH))
qqplot(algae$mxPH,main='Normal QQ plot of maximum pH')
par(mfrow=c(1,1))
par(mfrow=c(1,2))
hist(algae$mxPH, prob=T, xlab='',
main='Histogram of maximum pH value',ylim=0:1)
lines(density(algae$mxPH,na.rm=T))
rug(jitter(algae$mxPH))
qq.plot(algae$mxPH,main='Normal QQ plot of maximum pH')
par(mfrow=c(1,1))
help("car-deprecated")
y <- rt(200, df = 5)
qqnorm(y); qqline(y, col = 2)
qqplot(y, rt(300, df = 5))
par(mfrow=c(1,2))
hist(algae$mxPH, prob=T, xlab='',
main='Histogram of maximum pH value',ylim=0:1)
lines(density(algae$mxPH,na.rm=T))
rug(jitter(algae$mxPH))
qq.plot(algae$mxPH,main='Normal QQ plot of maximum pH')
par(mfrow=c(1,1))
qqnorm(y); qqline(y, col = 2)
qqplot(y, rt(300, df = 5))
qqplot(y)
qqnorm(algae$mxPH)
qqline(algae$mxPH)
qqplot(y, rt(300, df = 5))
qqplot(algae$mxPH, rt(300, df = 5))
qq.plot(algae$mxPH,main='Normal QQ plot of maximum pH')
library(car)
par(mfrow=c(1,2))
hist(algae$mxPH, prob=T, xlab='',
main='Histogram of maximum pH value',ylim=0:1)
lines(density(algae$mxPH,na.rm=T))
rug(jitter(algae$mxPH))
qq.plot(algae$mxPH,main='Normal QQ plot of maximum pH')
boxplot(algae$oPO4,ylab='Orthophosphate (oPO4)')
rug(jitter(algae$oPO4),side=2)
abline(h=mean(algae$oPO4,na.rm=T),lty=2)
boxplot(algae$oPO4,ylab='Orthophosphate (oPO4)')
?boxplot
boxplot(algae$oPO4,ylab='Orthophosphate (oPO4)')
plot(algae$NH4,xlab='')
abline(h=mean(algae$NH4,na.rm=T),lty=1)
abline(h=mean(algae$NH4,na.rm=T)+sd(algae$NH4,na.rm=T),lty=2)
abline(h=median(algae$NH4,na.rm=T),lty=3)
identify(algae$NH4)
plot(algae$NH4,xlab='')
clicked.lines <- identify(algae$NH4)
algae[clicked.lines,]
algae[algae$NH4 > 19000,]
algae[,algae$NH4 > 19000]
algae[algae$NH4 > 19000,]
algae[153,]
algae[!is.na(algae$NH4) & algae$NH4 > 19000,]
library(lattice)
print(bwplot(size ~ a1, data=algae,ylab='River Size',xlab='Algal A1'))
size
bwplot(size ~ a1, data=algae,ylab='River Size',xlab='Algal A1')
bwplot(size ~ a1, data=algae,ylab='River Size',xlab='Algal A1')
?bwplot
library(Hmisc)
print(bwplot(size ~ a1, data=algae,panel=panel.bpplot,
probs=seq(.01,.49,by=.01), datadensity=TRUE,
ylab='River Size',xlab='Algal A1'))
install.packages("Hmisc")
library(Hmisc)
print(bwplot(size ~ a1, data=algae,panel=panel.bpplot,
probs=seq(.01,.49,by=.01), datadensity=TRUE,
ylab='River Size',xlab='Algal A1'))
ts
?ts
www <-"http://www.massey.ac.nz/~pscowper/ts/pounds_nz.dat"
Z <- read.table(www,header = T)
Z.ts <-ts(Z, st = 1991, fr = 4)
Z[1:4,]
View(Z)
setwd("~/workspace/FraudDetection")
source("test_network.r")
igraph = tnet_igraph(sample, type="weighted one-mode tnet")
summary(igraph)
betweenness(igraph)
degree_w(sample, measure=c("degree","output", "alpha"), alpha=0.5)
betweenness_w(sample,alpha=0)
edge.betweenness(sample)
edge.betweenness(igraph)
eb <-edge.betweenness(igraph)
eb
fix(eb)
eb <-edge.betweenness(igraph, e = E(igraph))
eb
E(igraph)
V(igraph)
sample
fix(igraph)
setwd("~/workspace/MachineLearning/Learning_R/Time series with R")
list = [1,2,3]
list = {1,3,4}
exit
list <-c(1,3,5)
max(list)
var(list)
exit
exit()
quit()
rm(list=ls())
setwd('/home/lshi/code/R_code')
library('igraph', lib.loc = '/home/robert/workspace/Projects/health_fraud/lib')
rm(list=ls())
setwd('/home/robert/workspace/Projects/health_fraud/code/R_code')
library('igraph', lib.loc = '/home/robert/workspace/Projects/health_fraud/lib')
g <-read.graph("../data/test.txt", format = "ncol")
g <-read.graph("../data/test.txt", format = "ncol")
g <-read.graph("../data/edge_col.txt", format = "ncol")
g <-read.graph("../data/test.ncol", format = "ncol")
load("~/workspace/Projects/health_fraud/data/test.ncol")
g <-read.graph("../data/test.ncol", format = "ncol")
g <-read.graph("../data/test.ncol", format = "ncol")
g <-read.graph("../data/test.ncol", format = "ncol")
g <-read.graph("test.ncol", format = "ncol")
g
E(g)
V(g)
g <-read.graph("../../data/test.ncol", format = "ncol")
fix(g)
g <-read.graph("../../data/edge_col.txt", format = "ncol")
g <-read.graph("../../data/edge_col.txt", format = "ncol")
E(g)
g <-read.graph("../../data/test.txt", format = "ncol")
print(g, g=T, v=T, e=T)
plot(g)
E(g)$weight
den = graph.density(g, loops = T)
den = graph.density(g, loops = T)
#2. Degree Statistics: mean, variance, median, maximum degree
degrees = degree(g)
mean_degree = mean(degrees)
variance_degree = var(degrees)
median_degree = median(degrees)
maximum_degree = max(degrees)
#3. Edge weight statistics: mean and variance of weights (currently has some problem with weight.)
sum_weights = graph.strength(g, mode = 'all')
mean_weights = mean(sum_weights)
variance_weights = var(sum_weights)
median_weights = median(sum_weights)
maximum_weights = max(sum_weights)
#4. Diameter
diameter = diameter(g)
#5. Topological change.
cutoffs = c(0, 1, 2)
top_chgs = cutoffs*0
for (i in 1:(length(cutoffs)-1)) {
E_cur = length(which(E(g)$weight>cutoffs[i]))
E_new = length(which(E(g)$weight>cutoffs[i+1]))
top_chgs[i] = (E_cur - E_new)/E_cur
}
top_chgs[length(top_chgs)] = 1
#6. Clustering coefficient. mean, variance and maximum
clustering_coff_mean = transitivity(g, type = "globalundirected")
clustering_coff_local = transitivity(g, type = "localundirected")
clustering_coff_variance = var(clustering_coff_local)
clustering_coff_max = max(clustering_coff_local)
#7. Topological coefficient
V0 = as.numeric(V(g))
for (v0 in V0) {
V1 = neighbors(g, v0, 'all')
kn = length(V1)
J = 0
cnt = 0
for (v1 in V1) {
V2 = neighbors(g, v1, 'all')
for (v2 in V2) {
if (v2 != v0) {
J = J + length(which(neighbors(g, v2, 'all') %in% c(neighbors(g, v0, 'all'), v0)))
cnt = cnt + 1
}
}
}
V(g)[v0]$topological_coef = J/cnt/kn
}
topological_coef_mean = mean(V(g)$topological_coef)
topological_coef_variance = var(V(g)$topological_coef)
topological_coef_median = median(V(g)$topological_coef)
topological_coef_max = max(V(g)$topological_coef)
~
~
~
~
;
rm(list=ls())
setwd('/home/robert/workspace/Projects/health_fraud/code/R_code')
library('igraph', lib.loc = '/home/robert/workspace/Projects/health_fraud/lib')
g <-read.graph("../../data/edge_col.txt", format = "ncol")
print(g, g=T, v=T, e=T)
plot(g)
#1. Graph density
den = graph.density(g, loops = T)
#2. Degree Statistics: mean, variance, median, maximum degree
degrees = degree(g)
mean_degree = mean(degrees)
variance_degree = var(degrees)
median_degree = median(degrees)
maximum_degree = max(degrees)
#3. Edge weight statistics: mean and variance of weights (currently has some problem with weight.)
sum_weights = graph.strength(g, mode = 'all')
mean_weights = mean(sum_weights)
variance_weights = var(sum_weights)
median_weights = median(sum_weights)
maximum_weights = max(sum_weights)
#4. Diameter
diameter = diameter(g)
#5. Topological change.
cutoffs = c(0, 1, 2)
top_chgs = cutoffs*0
for (i in 1:(length(cutoffs)-1)) {
E_cur = length(which(E(g)$weight>cutoffs[i]))
E_new = length(which(E(g)$weight>cutoffs[i+1]))
top_chgs[i] = (E_cur - E_new)/E_cur
}
rm(list=ls())
setwd('/home/robert/workspace/Projects/health_fraud/code/R_code')
library('igraph', lib.loc = '/home/robert/workspace/Projects/health_fraud/lib')
g <-read.graph("../../data/edge_col.txt", format = "ncol")
# print(g, g=T, v=T, e=T)
# plot(g)
#1. Graph density
V(g)$page.rank <- page.rank(g,V(g),directed = TRUE)$vector
V(g)$out.degree<-degree(g,V(g),mode = c("out"),loops = TRUE)
V(g)$in.degree<-degree(g,V(g),mode = c("in"),loops = TRUE)
V(g)$total.degree<-degree(g,V(g),mode = c("total"),loops = TRUE)
V(g)$eigenvector.centrality<-evcent(g, V(g),scale = TRUE, weights = NULL)$vector
scores <- data.frame(name=V(g)$name, page.rank=V(g)$page.rank,out.degree=V(g)$out.degree,
in.degree=V(g)$in.degree, total.degree=V(g)$total.degree,
eigenvector.centrality=V(g)$eigenvector.centrality)
View(scores)
output<- data.frame(scores[order(-scores[,"page.rank"]),c("name", "page.rank")],
scores[order(-scores[,"out.degree"]),c("name","out.degree")],
scores[order(-scores[,"in.degree"]),c("name","in.degree")],
scores[order(-scores[,"total.degree"]),c("name","total.degree")],
scores[order(-scores[,"eigenvector.centrality"]),c("name","eigenvector.centrality")]
)
View(output)
View(output)
out_file <- "../../data/result/prac_centralities.csv"
write.table(output,out_file, col.names = TRUE, row.names = FALSE, sep = ",")
library('igraph', lib.loc = '/home/robert/workspace/Projects/health_fraud/lib')
library(digest)
install.packages("digest")
install.packages("digest")
install.packages("devtools")
R.Version()
which R
source_gist("5734624")
m(list=ls())
set
rm(list=ls())
setwd('/home/robert/workspace/Projects/health_fraud/code/R_code')
file = "../../data/010014-99999-2013.txt"
read.table(file, header = TRUE, sep = "")
read.table(file, header = TRUE, sep = "")
data <-read.table(file, header = TRUE, dec= " ")
View(data)
data$USAF
data2 <-cbind(data$YR-MODAHRMN,data$SKC, data$TEMP)
data2 <-cbind(data$Y--MODAHRMN,data$SKC, data$TEMP)
data[,2]
data[,1]
data[,3]
colnames(data)
data2 <-cbind(data$"YR..MODAHRMN",data$SKC, data$TEMP)
x <-while(data2 == "*")
)
which(data2 = "*")
which(data2 == "*")
View(data2)
which(data2 == '*')
which(data2[1] =="*")
which(data2[2] =="*")
which(data2[3] =="*")
is.numeric(data2[1])
is.numeric(data2[2])
is.numeric(data2[3])
rows <-which(data2 == '*')
data3 <-data2[!rows]
data3 <-data2[,!rows]
data3 <-data2[!rows,]
write.table(data2,"../../data/result.txt")
write.table(data2,"../../data/result.txt", col.names = TRUE, row.name = FALSE)
data2[!0]
data2[!`]
]
)
;
;
)
));
q
q
dfdd
0))
))}}}
;
[]]
